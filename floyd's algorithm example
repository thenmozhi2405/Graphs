def floyd(graph):
    num_vertices = len(graph)
    distances = [[float('inf')]*num_vertices for _ in range(num_vertices)]
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i == j:
                distances[i][j] = 0
            elif j in graph[i]:
                distances[i][j] = graph[i][j]
    for k in range(num_vertices):
        for i in range(num_vertices):
            for j in range(num_vertices):
                if distances[i][k] + distances[k][j] < distances[i][j]:
                    distances[i][j] = distances[i][k] + distances[k][j]
    return distances
graph = {
    0: {3: 3, 2: 6},
    1: {1: 3, 3: 2, 2: 0},
    2: {0: 4, 1: 2, 5: 7},
    3: {5: 3, 4: 7}
}
shortest_paths = floyd(graph)
for i in range(len(shortest_paths)):
    for j in range(len(shortest_paths[i])):
        print(f"Shortest path from {i} to {j}: {shortest_paths[i][j]}")
