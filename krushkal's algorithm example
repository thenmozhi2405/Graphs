class DisjointSet:
    def __init__(self, vertices):
        self.parent = {vertex: vertex for vertex in vertices}
        self.rank = {vertex: 0 for vertex in vertices}
    def find(self, vertex):
        if self.parent[vertex] != vertex:
            self.parent[vertex] = self.find(self.parent[vertex])
        return self.parent[vertex]
    def union(self, root1, root2):
        if self.rank[root1] > self.rank[root2]:
            self.parent[root2] = root1
        elif self.rank[root1] < self.rank[root2]:
            self.parent[root1] = root2
        else:
            self.parent[root2] = root1
            self.rank[root1] += 1
def kruskal(graph):
    vertices = set(vertex for edge in graph for vertex in edge)
    disjoint_set = DisjointSet(vertices)
    minimum_spanning_tree = set()
    edges = sorted(graph, key=lambda x: graph[x])
    for edge in edges:
        vertex1, vertex2 = edge
        root1 = disjoint_set.find(vertex1)
        root2 = disjoint_set.find(vertex2)
        if root1 != root2:
            minimum_spanning_tree.add(edge)
            disjoint_set.union(root1, root2)
    return minimum_spanning_tree
graph = {
    ('A', 'B'): 0,
    ('A', 'D'): 1,
    ('B', 'D'): 2,
    ('B', 'E'): 1,
    ('C', 'E'): 1,
    ('D', 'E'): 2
}
minimum_spanning_tree = kruskal(graph)
print("Minimum Spanning Tree:")
for edge in minimum_spanning_tree:
    print(edge)
